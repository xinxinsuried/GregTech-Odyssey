name: Check GTO Version in Bug Reports

on:
  issues:
    types: [edited, labeled]

permissions:
  contents: read
  issues: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check Issue and Version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            // 配置区域
            const VERSION_GAP = 1; // 允许的版本差距：0=必须最新，1=允许差一个小版本
            const HARDCODED_VERSION = "0.0.9-beta"; // 备用硬编码版本号
            
            // 检查是否有错误 bug 标签
            const hasBugLabel = issue.labels.some(label => 
              label.name === '错误 bug' || label.name === 'bug' || label.name === '错误'
            );
            
            if (!hasBugLabel) {
              console.log('This issue does not have a bug label. Skipping version check.');
              return;
            }
            
            // 从仓库中读取 pack.toml 文件
            const fs = require('fs');
            let currentVersion;
            try {
              const packToml = fs.readFileSync('pack.toml', 'utf8');
              const versionMatch = packToml.match(/version = "([^"]+)"/);
              if (versionMatch) {
                currentVersion = versionMatch[1];
                console.log(`Current version from pack.toml: ${currentVersion}`);
              } else {
                console.log('Could not extract version from pack.toml');
                currentVersion = HARDCODED_VERSION;
                console.log(`Using hardcoded current version: ${currentVersion}`);
              }
            } catch (error) {
              console.log(`Error reading pack.toml: ${error.message}`);
              currentVersion = HARDCODED_VERSION;
              console.log(`Using hardcoded current version: ${currentVersion}`);
            }
            
            // 获取允许的版本号列表函数
            function getAllowedVersions(currentVer, gap) {
              function parseVersion(versionStr) {
                const parts = versionStr.split('-');
                const versionParts = parts[0].split('.').map(Number);
                return {
                  major: versionParts[0] || 0,
                  minor: versionParts[1] || 0,
                  patch: versionParts[2] || 0,
                  suffix: parts[1] || '',
                  full: versionStr
                };
              }
              
              const currVer = parseVersion(currentVer);
              const allowedVersions = [currentVer]; // 始终包含当前版本
              
              // 添加当前版本的其他形式（有/无后缀）
              if (currVer.suffix) {
                allowedVersions.push(`${currVer.major}.${currVer.minor}.${currVer.patch}`);
              }
              
              // 添加允许的较早版本
              for (let i = 1; i <= gap; i++) {
                let patchVersion = currVer.patch - i;
                let minorVersion = currVer.minor;
                let majorVersion = currVer.major;
                
                // 处理版本号借位
                if (patchVersion < 0) {
                  patchVersion = 9;
                  minorVersion--;
                  
                  if (minorVersion < 0) {
                    minorVersion = 9;
                    majorVersion--;
                    
                    if (majorVersion < 0) {
                      break;
                    }
                  }
                }
                
                // 添加无后缀版本
                allowedVersions.push(`${majorVersion}.${minorVersion}.${patchVersion}`);
                // 添加带beta后缀版本
                allowedVersions.push(`${majorVersion}.${minorVersion}.${patchVersion}-beta`);
              }
              
              return allowedVersions;
            }
            
            // 格式化允许版本号的列表
            const allowedVersions = getAllowedVersions(currentVersion, VERSION_GAP);
            const formattedAllowedVersions = allowedVersions.map(v => `\`${v}\``).join(', ');
            console.log(`Allowed versions: ${JSON.stringify(allowedVersions)}`);
            
            // 获取所有 bot 之前的评论
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
            });
            
            // 查找本机器人之前的警告信息评论
            const botComments = comments.data.filter(comment => {
              return comment.user.type === 'Bot' && 
                    (comment.body.includes('温馨提示：版本信息格式问题') || 
                     comment.body.includes('温馨提示：缺少版本信息') || 
                     comment.body.includes('温馨提示：版本需要更新'));
            });
            
            const issueBody = issue.body;
            if (!issueBody) {
              console.log('Issue body is empty. Closing issue due to invalid format.');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## 温馨提示：缺少版本信息 / Friendly Notice: Missing Version Information\n\n感谢您向我们提交问题报告！不过我们注意到您的报告中似乎缺少 GTO 包版本信息。这些信息对我们解决问题非常重要。\n\n**推荐使用的版本:** ${formattedAllowedVersions}\n\n为了更好地为您服务，我们建议您使用官方模板，并填写完整的版本信息。当您更新报告后，系统将自动重新打开此问题，我们的团队将尽快处理您的反馈。\n\n感谢您的理解与支持！\n\n---\n\nThank you for submitting your report! However, we noticed that the GTO pack version information appears to be missing from your report. This information is crucial for us to effectively address your concerns.\n\n**Recommended versions:** ${formattedAllowedVersions}\n\nTo better assist you, we suggest using the official template and providing complete version information. Once you update your report, the system will automatically reopen this issue, and our team will address your feedback as soon as possible.\n\nWe appreciate your understanding and support!`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['invalid-format']
              });
              
              return;
            }
            
            // 从 issue 正文中提取版本字段
            const versionRegex = /GTO Pack Version \/ GTO包版本[\s\S]*?([0-9]+\.[0-9]+\.[0-9]+(?:-[a-zA-Z0-9]+)?)/;
            const match = issueBody.match(versionRegex);
            
            if (!match) {
              console.log('Could not extract version from issue body. Closing issue.');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## 温馨提示：版本信息格式问题 / Friendly Notice: Version Format Issue\n\n感谢您向我们提交问题报告！我们非常重视您的反馈，但系统未能从您的描述中识别出有效的 GTO 包版本信息。\n\n**推荐使用的版本:** ${formattedAllowedVersions}\n\n为了让我们能更好地解决您遇到的问题，烦请您使用最新版本的官方模板，并确保版本号格式正确（如：\`${currentVersion}\`）。当您更新报告后，系统将自动重新打开此问题。\n\n感谢您的配合与耐心！\n\n---\n\nThank you for your bug report! We highly value your feedback, but our system couldn't identify a valid GTO pack version from your description.\n\n**Recommended versions:** ${formattedAllowedVersions}\n\nTo help us better address your issue, please use the official template from the latest version and ensure the version number is in the correct format (e.g., \`${currentVersion}\`). Once you update your report, the system will automatically reopen this issue.\n\nThank you for your cooperation and patience!`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['invalid-format']
              });
              
              return;
            }
            
            const reportedVersion = match[1];
            console.log(`Reported version: ${reportedVersion}`);
            
            // 检查版本是否在允许的范围内
            if (allowedVersions.includes(reportedVersion)) {
              console.log('Version is within allowed range. No action needed.');
              
              // 如果 issue 被标记为过时版本或无效格式，但现在版本正确，移除这些标签并重新打开 issue
              const hasOutdatedLabel = issue.labels.some(label => label.name === 'outdated-version');
              const hasInvalidFormatLabel = issue.labels.some(label => label.name === 'invalid-format');
              
              if (hasOutdatedLabel) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'outdated-version'
                }).catch(e => console.log('Error removing outdated-version label:', e.message));
              }
              
              if (hasInvalidFormatLabel) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'invalid-format'
                }).catch(e => console.log('Error removing invalid-format label:', e.message));
              }
              
              // 如果 issue 已关闭且有这些标签之一，重新打开
              if (issue.state === 'closed' && (hasOutdatedLabel || hasInvalidFormatLabel)) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'open'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `## 版本验证通过，问题已重新打开 / Version Verified, Issue Reopened\n\n非常感谢您更新了问题报告！您现在使用的版本 (\`${reportedVersion}\`) 是受支持的版本，我们已自动重新打开这个问题。我们的团队将尽快查看并处理您的反馈。\n\n感谢您对 GTO 项目的支持与贡献！\n\n---\n\nThank you for updating your report! The version you're using now (\`${reportedVersion}\`) is supported, and we've automatically reopened this issue. Our team will review and address your feedback as soon as possible.\n\nWe appreciate your support and contributions to the GTO project!`
                });
              }
              
              // 隐藏之前的机器人警告信息
              if (botComments.length > 0) {
                for (const comment of botComments) {
                  // 处理每一行文本，为每一行添加删除线标记
                  const processedLines = comment.body.split('\n').map(line => {
                    // 忽略空行
                    if (line.trim() === '') return '';
                    return `~~${line}~~`;
                  }).join('\n');
                  
                  // 更新评论 - 移除了之前的"已解决"文本行
                  const updatedBody = `<details>\n<summary><b>已解决的版本问题 (点击展开) / Resolved Version Issue (Click to expand)</b></summary>\n\n${processedLines}\n</details>`;
                  
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id,
                    body: updatedBody
                  });
                }
              }
              
              return;
            } else {
              console.log('Version is outside allowed range. Closing issue.');
              
              // 添加评论解释为什么关闭
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## 温馨提示：版本需要更新 / Friendly Notice: Version Update Needed\n\n感谢您的问题报告！我们注意到您正在使用的 GTO 包版本 (\`${reportedVersion}\`) 已不在当前支持的版本范围内。\n\n**当前支持的版本:** ${formattedAllowedVersions}\n\n**若此BUG也存在于最新版本:** 使用右上角的Edit功能修改版本为上述版本\n\n为了给您提供更好的支持，我们建议您先更新到最新版本，并确认问题是否仍然存在。如果更新后问题依然存在，请使用支持的版本号重新提交报告。当您更新报告后，系统将自动重新打开此问题。\n\n感谢您的理解与配合，您的反馈对我们非常宝贵！\n\n---\n\nThank you for your bug report! We noticed that the GTO pack version you're using (\`${reportedVersion}\`) is no longer within our currently supported version range.\n\n**Currently supported versions:** ${formattedAllowedVersions}\n\n**If this bug also exists in the latest version:** Use the Edit function in the upper right corner to modify the version to the above version\n\nTo provide you with the best support, we recommend updating to the latest version and checking if the issue persists. If the problem continues after updating, please resubmit your report using one of the supported versions. Once you update your report, the system will automatically reopen this issue.\n\nWe appreciate your understanding and cooperation. Your feedback is valuable to us!`
              });
              
              // 关闭 issue 并标记为 "not planned"
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              // 添加过时版本标签
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['outdated-version']
              });
              
              // 移除无效格式标签（如果有的话）
              const hasInvalidFormatLabel = issue.labels.some(label => label.name === 'invalid-format');
              if (hasInvalidFormatLabel) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'invalid-format'
                }).catch(e => console.log('Error removing invalid-format label:', e.message));
              }
            }
