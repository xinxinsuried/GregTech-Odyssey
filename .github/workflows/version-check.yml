name: Check GTO Version in Bug Reports

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  check-version:
    runs-on: ubuntu-latest
    # 移除条件判断，让工作流先运行，在脚本内部处理标签检查
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Check Issue and Version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            
            // 检查是否有错误 bug 标签
            const hasBugLabel = issue.labels.some(label => 
              label.name === '错误 bug' || label.name === 'bug' || label.name === '错误'
            );
            
            if (!hasBugLabel) {
              console.log('This issue does not have a bug label. Skipping version check.');
              return;
            }
            
            // 从仓库中读取 pack.toml 文件
            const fs = require('fs');
            let currentVersion;
            try {
              const packToml = fs.readFileSync('pack.toml', 'utf8');
              const versionMatch = packToml.match(/version = "([^"]+)"/);
              if (versionMatch) {
                currentVersion = versionMatch[1];
                console.log(`Current version from pack.toml: ${currentVersion}`);
              } else {
                console.log('Could not extract version from pack.toml');
                return;
              }
            } catch (error) {
              console.log(`Error reading pack.toml: ${error.message}`);
              
              // 备选方案：硬编码当前版本
              currentVersion = "0.0.9-beta";
              console.log(`Using hardcoded current version: ${currentVersion}`);
            }
            
            const issueBody = issue.body;
            if (!issueBody) {
              console.log('Issue body is empty. Skipping version check.');
              return;
            }
            
            // 从 issue 正文中提取版本字段
            const versionRegex = /GTO Pack Version \/ GTO包版本[\s\S]*?([0-9]+\.[0-9]+\.[0-9]+(?:-[a-zA-Z0-9]+)?)/;
            const match = issueBody.match(versionRegex);
            
            if (match) {
              const reportedVersion = match[1];
              console.log(`Reported version: ${reportedVersion}`);
              
              // 检查版本是否匹配
              // 接受精确匹配或者忽略 beta 后缀的匹配
              const exactMatch = reportedVersion === currentVersion;
              const baseCurrentVersion = currentVersion.split('-')[0];
              const baseReportedVersion = reportedVersion.split('-')[0];
              const baseMatch = baseReportedVersion === baseCurrentVersion;
              
              if (exactMatch || baseMatch) {
                console.log('Version matches current. No action needed.');
                return;
              } else {
                console.log('Version does not match current. Closing issue.');
                
                // 添加评论解释为什么关闭
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `## 版本不匹配通知 / Version Mismatch Notice\n\n您报告的 GTO 包版本 (\`${reportedVersion}\`) 不是当前最新版本 (\`${currentVersion}\`)。\n\n请更新到最新版本并验证问题是否仍然存在。如果问题在最新版本中仍然存在，请使用最新版本重新提交错误报告。\n\n此 issue 已被自动关闭。\n\n---\n\nThe GTO pack version you reported (\`${reportedVersion}\`) is not the current latest version (\`${currentVersion}\`).\n\nPlease update to the latest version and verify if the issue still exists. If the issue still persists in the latest version, please resubmit your bug report using the latest version.\n\nThis issue has been automatically closed.`
                });
                
                // 关闭 issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                // 添加过时版本标签
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['outdated-version']
                });
              }
            } else {
              console.log('Could not extract version from issue body.');
              
              // 只有在能确认是 bug 报告但无法提取版本时才执行这部分
              // 检查 issue 标题或正文是否包含错误报告相关字样
              const isBugReport = /bug|error|问题|错误|failure|fail/i.test(issue.title) || 
                                 /Expected Behavior|Observed Behavior|预期行为|实际行为/i.test(issueBody);
              
              if (hasBugLabel && isBugReport) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `## 版本信息缺失 / Missing Version Information\n\n无法从您的错误报告中提取 GTO 包版本信息。请确保您填写了正确的版本号，并使用最新版本 (\`${currentVersion}\`)。\n\n此 issue 已被标记为格式无效。请考虑使用正确的模板重新提交。\n\n---\n\nCould not extract the GTO pack version information from your bug report. Please ensure you filled in the correct version number and are using the latest version (\`${currentVersion}\`).\n\nThis issue has been marked as invalid format. Please consider resubmitting using the correct template.`
                });
                
                // 添加格式无效标签但不自动关闭
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['invalid-format']
                });
              }
            }
